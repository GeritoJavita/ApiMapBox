=== Comentarios actualizados para js/app.js (en español) ===

1) Configuración inicial
- mapboxgl.accessToken: token de Mapbox usado para las llamadas a sus APIs.
- DEFAULT_POIS: arreglo con POIs por defecto (id, title, category, coords, desc). Se usan como respaldo si no hay POIs guardados.
- ICONS: mapeo categoría -> emoji usado como icono visual.

2) Estado y referencias DOM
- POIS: arreglo en memoria que contiene los puntos de interés actuales (lectura/escritura).
- markers: arreglo con objetos creados por createMarker { id, marker, poi } para manejarlos en el mapa.
- addMode, editingId: flags para controlar la UI (agregar un marcador, editar uno existente).
- listEl, searchEl, modal, mTitle, mDesc, mSave, mCancel: referencias a elementos HTML del interfaz.

3) Inicialización del mapa
- Se crea el objeto `map` con estilo, centro y controles de navegación. Es la base sobre la que se añaden marcadores y capas.

4) loadSaved()
- Propósito: recuperar POIs persistidos en localStorage (clave 'pois_v2').
- Entradas: ninguna.
- Salidas/efectos: asigna `POIS` desde localStorage o usa `DEFAULT_POIS` si no hay datos válidos.
- Errores: captura parseo inválido y cae a DEFAULT_POIS.

5) savePOIs()
- Propósito: persistir el arreglo `POIS` en localStorage bajo la clave 'pois_v2'.
- Entradas: `POIS` (variable global).
- Salidas/efectos: side-effect -> localStorage actualizado.

6) createMarker(poi)
- Propósito: crear un marcador de Mapbox y su popup a partir de un objeto POI.
- Entradas: un objeto POI { id, title, coords, category, desc }.
- Salidas: devuelve un objeto { id, marker, poi } y añade el marker al mapa.
- Notas: el popup contiene botones para editar y eliminar; en esta versión usan funciones globales `editPOI` y `deletePOI`.

7) renderMarkers()
- Propósito: sincronizar los marcadores del mapa con el arreglo `POIS`.
- Procedimiento: remueve marcadores actuales, crea nuevos con createMarker para cada POI y llama a renderList().

8) renderList()
- Propósito: poblar la lista lateral (`listEl`) con los POIs actuales.
- Formato: cada elemento contiene icono, título, descripción y un botón 'Ir' que centra el mapa.

9) Manejo de click en lista
- Delegación: un event listener en `listEl` detecta clicks en botones con clase 'btn-go' y hace `map.flyTo` al POI correspondiente.

10) Búsqueda / Autocompletado (searchEl)
- Propósito: llamar a la API de geocoding de Mapbox y mostrar resultados en la lista lateral.
- Flujo: al escribir (input) se hace fetch a endpoints de Mapbox, se muestran resultados (hasta 5) y al seleccionar uno se centra el mapa y se crea un marcador temporal.
- Errores: captura excepciones de red/JSON y las imprime en consola.

11) Botones de UI principales
- btn-fit: ajusta bounds del mapa para incluir todos los POIs.
- locate: usa geolocalización del navegador para centrar mapa y añadir marcador de usuario.
- style-select: cambia el estilo del mapa.
- btn-toggle-sidebar: muestra/oculta la barra lateral.

12) Agregar marcadores (addBtn y flujo click en mapa)
- addBtn: activa/desactiva `addMode`. Cuando `addMode` está activo, el siguiente click en el mapa crea un POI nuevo.
- Flujo: pedir título y descripción mediante prompt, crear POI con id 'user_<timestamp>', añadir a POIS, persistir y refrescar marcadores.

13) Editar y eliminar (editPOI / deletePOI)
- editPOI(id): abre el modal de edición y precarga título/descripcion; al guardar actualiza el POI, persiste y refresca.
- deletePOI(id): confirma eliminación, filtra POIS para quitar el elemento, persiste y refresca.

14) Exportar / Importar
- Export: genera un blob JSON con `POIS` y fuerza descarga como 'mis_pois.json'.
- Import: permite seleccionar un archivo JSON local; si es un arreglo válido reemplaza `POIS`, persiste y refresca la interfaz.

15) Inicio (map.on('load'))
- Al cargarse el mapa se llama a loadSaved() y renderMarkers() para restaurar el estado persistido.

Notas finales y recomendaciones
- Las funciones que manipulan el DOM y el mapa realizan side-effects directos; mantener `POIS` como única fuente de verdad facilita depuración.
- Si quieres JSDoc o una versión con comentarios inline en el código (para IDEs), puedo generarla manteniendo este archivo .txt como referencia.

Fin del archivo.
